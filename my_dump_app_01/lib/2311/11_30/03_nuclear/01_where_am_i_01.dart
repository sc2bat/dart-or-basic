// ignore_for_file: slash_for_doc_comments

import 'package:simple_logger/simple_logger.dart';

/**
 * ⭐️⭐️⭐️ 여긴 어디
 * 
 * 당신은 최근 RPG 게임에 중독되었습니다. 레어 아이템을 손에 넣기 위해서, 맵상을 여기저기
  돌아다닐 필요가 있습니다만, 아이템 찾기에 너무 열중해, 캐릭터가 지금 어디에 있는지 모르게
  되어 버리는 경우가 자주 있습니다.
  당신은 어려움을 겪었지만,이 게임에서는 캐릭터의 이동 로그를 볼 수 있다는 것을 알았습니다.
  그래서 이 이동 로그를 이용하여 캐릭터가 지금 있는 위치를 표시하는 프로그램을 만들려고 합
  니다.
  프로그램을 만드는 데 주의해야 할 사항이 하나 있습니다.
  이 게임에서는 맵의 상단과 하단이 연결되어 있고 오른쪽과 왼쪽 끝이 연결됩니다.
  예를 들어, 가로폭이 7, 세로폭이 6인 맵으로, 캐릭터의 초기 위치가 (3,4)로 합니다.
  (그러나 (0,0)은 왼쪽 하단 모서리이고 (6,5)는 오른쪽 위 모서리를 나타냅니다).
  이 때 위로 3 진행하면 (3,4) → (3,5) → (3,0) → (3,1) 과 같이 이동합니다.
  또한, 초기 위치 (3,4)에서 왼쪽으로 5 진행하면 (3,4) → (2,4) → (1,4) → (0,4) → (6,4) →
  (5,4) )처럼 이동합니다.
  맵의 가로 폭 w, 세로 폭 h, 캐릭터의 초기 위치 (x, y), 이동 횟수 n, 그리고 n 개분의 이동 로그
  가 주어지므로, 마지막에 캐릭터가 있는 위치를 출력해 주세요.

입력

  입력 형식
  whn
  xy
  dir_1 m_1
  dir_2 m_2
  ···
  dir_n m_n

첫 번째 행에는 맵의 가로 폭 w, 세로 폭 h 및 이동 로그 수 n이 주어집니다.
두 번째 행에는 초기 위치 x, y가 주어집니다.
세 번째 행에서 n+2 행까지 이동 로그가 제공됩니다. dir_i 는 이동한 방향을, m_i 는 이동한 거리를 나타냅니다.
dir_i는 "U", "D", "R", "L" 중 하나로 주어지며 각각 위, 아래, 오른쪽, 왼쪽으로의 이동을 나타냅니다.

출력
  n번 이동 후의 캐릭터의 위치 (x_ans, y_ans)를 공백으로 구분지어 "x_ans y_ans" 라고 출력
  해 주세요.
 */

/* map sample
(0, 5)  (1, 5)  (2, 5)  (3, 5)  (4, 5)  (5, 5)  (6, 5)
(0, 4)  (1, 4)  (2, 4)  (3, 4)  (4, 4)  (5, 4)  (6, 4)
(0, 3)  (1, 3)  (2, 3)  (3, 3)  (4, 3)  (5, 3)  (6, 3)
(0, 2)  (1, 2)  (2, 2)  (3, 2)  (4, 2)  (5, 2)  (6, 2)
(0, 1)  (1, 1)  (2, 1)  (3, 1)  (4, 1)  (5, 1)  (6, 1)
(0, 0)  (1, 0)  (2, 0)  (3, 0)  (4, 0)  (5, 0)  (6, 0)
 */

/**
 * 
  입력 예1
    7 6 1
    3 4
    U 3
  출력 예1
    3 1

  입력 예2
    7 6 1
    3 4
    L 5
  출력 예2
    5 4
 */

final log = SimpleLogger();

void main() {
  int mapW = 7;
  int mapH = 6;
  int moveN = 1;
  int locateX = 3;
  int locateY = 4;

  List<List<String>> moveLog = [
    [
      'U',
      '3'
    ], //👻 INFO 2023-11-30 11:11:32.005 [caller info not available] x, y ==> 3, 1
    // ['R', '7'],
    // ['L', '5'], // 👻 INFO 2023-11-30 11:11:17.168 [caller info not available] x, y ==> 5, 4
  ];

  for (int i = 0; i < moveLog.length; i++) {
    if (moveLog[i][0] == "U") {
      locateY += int.parse(moveLog[i][1]);
    } else if (moveLog[i][0] == "D") {
      locateY -= int.parse(moveLog[i][1]);
    } else if (moveLog[i][0] == "R") {
      locateX += int.parse(moveLog[i][1]);
    } else {
      locateX -= int.parse(moveLog[i][1]);
    }

    locateX = locateX % mapW;
    locateY = locateY % mapH;
  }
  log.info('x, y ==> $locateX, $locateY');
}
